datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int       @id @default(autoincrement())
  name           String?
  email          String?   @unique
  image          String?
  emailVerified  DateTime?
  password       String?
  stripeId       String?
  tracks         Track[]
  purchases      Purchase[]
  accounts       Account[]
  sessions       Session[]
}

model Track {
  id         Int        @id @default(autoincrement())
  title      String
  fileUrl    String
  imageUrl  String? 
  price      Decimal    @db.Decimal(10, 2)
  genre      String?
  artist     User       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId   Int
  purchases  Purchase[]
  createdAt DateTime   @default(now())
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  track     Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   Int
  amount    Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text   // ✅ Increased field size
  access_token      String?  @db.Text   // ✅ Increased field size
  id_token          String?  @db.Text   // ✅ Increased field size
  expires_at        Int?
  token_type        String?
  scope             String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
